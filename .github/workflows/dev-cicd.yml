name: Dev CICD

on:
  push:
    # run on all branches except main
    branches-ignore: [main]
  # Option to execute manually
  workflow_dispatch:

# cancel duplicate
concurrency:
  group: dev-cicd
  cancel-in-progress: true

jobs:
  # db-migration:
  #   name: DB Migration local -> dev
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: Dev
  #   env:
  #     SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  #     SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
  #     SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.GA_PAT }}
  #     - name: Setup supabase-cli
  #       uses: supabase/setup-cli@v1
  #       with:
  #         version: 1.27.5
  #     - name: Supabase migration
  #       run: |
  #         supabase link --project-ref $SUPABASE_PROJECT_ID
  #         supabase db push

  create-pull-request:
    name: Create Pull Request
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ env.branch_name }}
      pr_num: ${{ steps.create-pull-request.outputs.pull-request-number }}
    steps:
      - name: Get main branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GA_PAT }}
      - name: Extract branch name
        shell: bash
        run: echo "branch_name=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
        id: extract-branch
      - name: Get PR label
        # This command just trims chars before "/" e.g. "feature/one" -> "feature"
        run: echo "LABEL=$(s=$(git rev-parse --abbrev-ref HEAD) && echo "${s%%/*}")" >> $GITHUB_ENV
        id: get-pr-label
      - name: Get PR title
        run: echo "PR_TITLE=$(node tools/scripts/get-pr-title.js ${{ env.branch_name }})" >> $GITHUB_ENV
        id: get-pr-title
      - name: GPG Verification
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          fingerprint: 'A00EC0908EBB330097F9F9F018E545E55315C616'
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_push_gpgsign: true
      - name: Reset main branch into feature branch
        run: |
          git checkout main
          git fetch origin ${{ env.branch_name }}:${{ env.branch_name }}
          git reset --hard ${{ env.branch_name }}
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        id: create-pull-request
        with:
          token: ${{ secrets.GA_PAT }}
          committer: John Ballesteros <johnshift.dev@gmail.com>
          branch: ${{ env.branch_name }}
          title: '${{ env.PR_TITLE }}'
          labels: '${{ env.LABEL }}'
          assignees: johnshift
          body: ':zap: Automated PR'
      - name: Enable Pull Request Automerge
        if: steps.create-pull-request.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v2
        with:
          token: ${{ secrets.GA_PAT }}
          pull-request-number: ${{ steps.create-pull-request.outputs.pull-request-number }}
          merge-method: squash

  get-affected:
    name: Get NX Affected Libraries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GA_PAT }}
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - name: Install deps
        run: yarn install --frozen-lockfile --prefer-offline
      - name: Get storybook affected libs
        run: echo "storybook_libs=$(node tools/scripts/get-affected-libs.js build-storybook ${{ secrets.LATEST_TAG_SHA }} ${{ github.sha }})" >> $GITHUB_ENV
      - name: Echo Storybook E2E Affected Libraries
        run: echo "affected storybook libs = ${{ env.storybook_libs }}"
    outputs:
      storybook_libs: ${{ env.storybook_libs }}

  # TODO: nx unit test affected matrix
  # TODO: test report
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GA_PAT }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install deps
        run: yarn install --frozen-lockfile --prefer-offline

      - name: Unit Test Affected by Release
        run: yarn test:all --base ${{ secrets.LATEST_TAG_SHA }}

  chromatic:
    name: ${{ matrix.projectName }}
    runs-on: ubuntu-latest
    needs: [get-affected]
    if: ${{ fromJson(needs.get-affected.outputs.storybook_libs)[0] }}
    strategy:
      matrix:
        projectName: ${{ fromJson(needs.get-affected.outputs.storybook_libs ) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GA_PAT }}
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - name: Install deps
        run: yarn install --frozen-lockfile --prefer-offline
      - name: Build storybook
        run: yarn nx build-storybook ${{ matrix.projectName }}
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          storybookBuildDir: dist/storybook/${{ matrix.projectName }}

  dev-deploy:
    name: Dev Deploy
    runs-on: ubuntu-latest
    environment:
      name: Dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GA_PAT }}

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          vercel-args: --prod

  # TODO: e2e check

  final-check:
    name: Final Check
    runs-on: ubuntu-latest
    needs: [create-pull-request, run-tests, dev-deploy, chromatic]
    if: |
      always() &&
      needs.create-pull-request.result == 'success' &&
      needs.run-tests.result == 'success' &&
      needs.dev-deploy.result == 'success' &&
      needs.chromatic.result == 'success'
    steps:
      - run: echo "All checks passed"
